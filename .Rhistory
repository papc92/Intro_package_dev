# Describe your package
fusen::fill_description(
pkg = here::here(),
fields = list(
Title = "Build A Package From Rmarkdown File",
Description = "Use Rmarkdown First method to build your package. Start your package with documentation. Everything can be set from a Rmarkdown file in your project.",
`Authors@R` = c(
person("Paúl", "Ponce", email = "poncecol@unhcr.org", role = c("aut", "cre")),
person(given = "ThinkR", role = "cph")
)
)
)
# Define License with use_*_license()
usethis::use_mit_license("Paúl Ponce")
library(testthat)
#' Get a message with a fur color
#'
#' You can get a message with the fur color of interest with `get_message_fur_color()`
#'
#' @return None
#'
#' @export
get_message_fur_color <- function(primary_fur_color) {
message(glue("We will focus on {primary_fur_color} squirrels"))
}
get_message_fur_color(primary_fur_color = "Cinnamon")
library(testthat)
library(glue)
#' Get a message with a fur color
#'
#' You can get a message with the fur color of interest with `get_message_fur_color()`
#'
#' @return None
#'
#' @export
get_message_fur_color <- function(primary_fur_color) {
message(glue("We will focus on {primary_fur_color} squirrels"))
}
get_message_fur_color(primary_fur_color = "Cinnamon")
test_that("get_message_fur_color works", {
expect_message(
object = get_message_fur_color(primary_fur_color = "Cinnamon"),
regexp = "We will focus on Cinnamon squirrels"
)
})
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
attachment::att_amend_desc()
devtools::check()
library(squirrelspaul)
squirrelspaul::get_message_fur_color(pink)
squirrelspaul::get_message_fur_color(gray
gray()
?squirrelspaul::get_message_fur_color()
squirrelspaul::get_message_fur_color("gray")
?get_message_fur_color
get_message_fur_color(primary_fur_color = "Cinnamon")
remotes::install_local(path="~/to/squirrelspaul_0.0.0.9000.tar.gz", build_vignettes = TRUE)
remotes::install_local(path="~/squirrelspaul_0.0.0.9000.tar.gz", build_vignettes = TRUE)
devtools::test()
fusen::add_flat_template(template = "additional",
flat_name = "check_data")
#' check_data Title
#'
#' @return 1
#' @export
#'
#' @examples
check_primary_color_is_ok <- function(string) {
all_colors_OK <- all(
string %in% c("Gray", "Cinnamon", "Black", NA)
)
return(all_colors_OK)
}
check_primary_color_is_ok("Cinnamon")
check_primary_color_is_ok("Gray","Cinnamon")
check_primary_color_is_ok("Cinnamon")
check_primary_color_is_ok("White")
test_that("check_data works", {
expect_message(
object = check_primary_color_is_ok( c("Gray", "Cinnamon", "Black")),
regexp = "Your selection it is not in squirrels' fur color vector"
)
})
test_that("check_data works", {
expect_true(
object = check_primary_color_is_ok( c("Gray", "Cinnamon", "Black")),
regexp = "Your selection it is not in squirrels' fur color vector"
)
})
test_that("check_data works", {
expect_true(
object = check_primary_color_is_ok(string %in% c("Gray", "Cinnamon", "Black")),
regexp = "Your selection corresponds to squirrels' fur color vector"
)
})
?expect_true
test_that("check_data works", {
expect_true(
object = check_primary_color_is_ok(string %in% c("Gray", "Cinnamon", "Black"))
)
})
test_that("check_data works", {
expect_true(
object = check_primary_color_is_ok(string = c("Gray", "Cinnamon", "Black"))
)
})
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_check_data.Rmd", vignette_name = "Check data")
usethis::use_pkgdown()
pkgdown::build_site(override = list(destination = "inst/site"))
usethis::use_readme_rmd()
usethis::use_code_of_conduct("poncecol@unhcr.org")
usethis::use_news_md()
usethis::use_version()
pkgdown::build_site(override = list(destination = "inst/site"))
library(squirrelspaul)
usethis::use_git()
library(squirrelspaul)
study_activity <- function(df_squirrels_act, col_primary_fur_color) {
stopifnot(is.data.frame(df_squirrels_act))
stopifnot(is.character(col_primary_fur_color))
table <- df_squirrels_act %>%
filter(col_primary_fur_color == primary_fur_color)
graph <- table %>%
ggplot() +
aes(x = activity, y = counts, fill = age) +
geom_col() +
labs(x = "Type of activity",
y = "Number of observations",
title = glue("Type of activity by age for {tolower(col_primary_fur_color)} squirrels")) +
scale_fill_manual(name = "Age",
values = c("#00688B", "#00BFFF"))
return(list(table = table, graph = graph))
}
data(data_act_squirrels)
study_activity(df_squirrels_act = data_act_squirrels,
col_primary_fur_color = "Gray")
library(squirrelspaul)
data(data_act_squirrels)
study_activity(df_squirrels_act = data_act_squirrels,
col_primary_fur_color = "Gray")
usethis::use_git_remote("origin",
url = "https://github.com/training-unhcr-n2/squirrelspaul.git",
overwrite = TRUE)
#' study_activity
#'
#' Asses the available data and the variable with the primary fur colors of the squirrels. Then, generates a table and a graph.
#'
#' @return A list with the outputs
#'
#' @importFrom ggplot2 ggplot2
#'
#' @export
#'
study_activity <- function(df_squirrels_act, col_primary_fur_color) {
stopifnot(is.data.frame(df_squirrels_act))
stopifnot(is.character(col_primary_fur_color))
table <- df_squirrels_act %>%
filter(col_primary_fur_color == primary_fur_color)
graph <- table %>%
ggplot() +
aes(x = activity, y = counts, fill = age) +
geom_col() +
labs(x = "Type of activity",
y = "Number of observations",
title = glue("Type of activity by age for {tolower(col_primary_fur_color)} squirrels")) +
scale_fill_manual(name = "Age",
values = c("#00688B", "#00BFFF"))
return(list(table = table, graph = graph))
}
data(data_act_squirrels)
study_activity(df_squirrels_act = data_act_squirrels,
col_primary_fur_color = "Gray")
library(squirrelspaul)
data <- my_dataset
data <- "~/data/my_dataset
data <- "~/data/my_dataset"
data <- "~/data/my_dataset.rda"
load("~/squirrelspaul/data/my_dataset.rda")
View(my_dataset)
data(my_dataset)
study_activity(df_squirrels_act = my_dataset,
col_primary_fur_color = "Gray")
library(dplyr)
data(my_dataset)
study_activity(df_squirrels_act = my_dataset,
col_primary_fur_color = "Gray")
library(testthat)
library(glue)
library(dplyr)
library(ggplot2)
data(my_dataset)
study_activity(df_squirrels_act = my_dataset,
col_primary_fur_color = "Gray")
load("~/projectpp2/data/DATASET.rda")
View(DATASET)
data(DATASET)
study_activity(df_squirrels_act = DATASET,
col_primary_fur_color = "Gray")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
# Generate documentation and deal with dependencies
attachment::att_amend_desc()
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
2
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
rm(data)
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
usethis::use_data_raw()
DATASET <- read_csv("../projectpp2/data-raw/nyc_squirrels_act_sample.csv")
library(dplyr)
library(readr)
library(dplyr)
DATASET <- read_csv("data-raw/nyc_squirrels_act_sample.csv")
usethis::use_data(DATASET, overwrite = TRUE)
DATASET <- DATASET %>% filter(age=="Adult")
checkhelper::use_data_doc(
name = "DATASET",
description = "A small example dataset",
source = "Squirrels data"
)
attachment::att_amend_desc()
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_study_squirrels.Rmd",
vignette_name = "Study the squirrels")
?write.csv2
